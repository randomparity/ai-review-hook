{
  ".py": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this Python file: {filename}\n\nGit Diff:\n```\n{diff}\n```\n\nCurrent File Content:\n```\n{content}\n```\n\n{diff_only_note}\n\nFocus on Python-specific concerns:\n1. **PEP 8 Compliance**: Check coding style, naming conventions, line length\n2. **Type Hints**: Ensure proper type annotations where appropriate\n3. **Imports**: Verify import organization and avoid unused imports\n4. **Docstrings**: Check for proper function/class documentation\n5. **Error Handling**: Look for appropriate exception handling\n6. **Security**: Check for common Python security issues (SQL injection, etc.)\n7. **Performance**: Identify potential performance bottlenecks\n\nProvide specific, actionable feedback with line numbers. If no issues found, explain why the code is approved.",

  ".md": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this documentation file: {filename}\n\nChanges:\n```\n{diff}\n```\n\n{diff_only_note}\n\nFocus on documentation quality:\n1. **Grammar and Spelling**: Check for grammatical errors and typos\n2. **Clarity and Readability**: Ensure content is clear and well-structured\n3. **Formatting**: Verify proper Markdown syntax and formatting\n4. **Completeness**: Check if documentation covers all necessary information\n5. **Links and References**: Validate links and cross-references\n6. **Consistency**: Ensure consistent terminology and style\n7. **Accessibility**: Consider readability for diverse audiences\n\nNote: Security vulnerabilities are less relevant for documentation. Focus on content quality and user experience.",

  ".js": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this JavaScript file: {filename}\n\nGit Diff:\n```\n{diff}\n```\n\nCurrent File Content:\n```\n{content}\n```\n\n{diff_only_note}\n\nFocus on JavaScript-specific concerns:\n1. **Modern Syntax**: Use ES6+ features, async/await over promises when appropriate\n2. **Error Handling**: Proper try-catch blocks and error propagation\n3. **Security**: Check for XSS vulnerabilities, input validation, CSRF protection\n4. **Performance**: Avoid memory leaks, optimize DOM manipulation\n5. **Type Safety**: Consider TypeScript patterns or JSDoc for type hints\n6. **Code Style**: Consistent formatting, meaningful variable names\n7. **Browser Compatibility**: Consider target browser support\n\nProvide specific feedback with line numbers. If no issues found, explain why the code is approved.",

  ".go": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this Go file: {filename}\n\nGit Diff:\n```\n{diff}\n```\n\nCurrent File Content:\n```\n{content}\n```\n\n{diff_only_note}\n\nFocus on Go-specific concerns:\n1. **Go Idioms**: Follow Go conventions and idiomatic patterns\n2. **Error Handling**: Proper error checking and propagation\n3. **Goroutines and Concurrency**: Safe concurrent programming practices\n4. **Memory Management**: Avoid memory leaks, proper resource cleanup\n5. **Performance**: Efficient algorithms and data structures\n6. **Security**: Input validation, secure coding practices\n7. **Testing**: Ensure testable code structure\n\nProvide specific feedback with line numbers. If no issues found, explain why the code is approved.",

  ".sql": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this SQL file: {filename}\n\nGit Diff:\n```\n{diff}\n```\n\nCurrent File Content:\n```\n{content}\n```\n\n{diff_only_note}\n\nFocus on SQL-specific concerns:\n1. **Security**: Check for SQL injection vulnerabilities, proper parameterization\n2. **Performance**: Efficient queries, proper indexing, avoid N+1 problems\n3. **Data Integrity**: Proper constraints, foreign keys, data validation\n4. **Readability**: Clear formatting, meaningful aliases, comments\n5. **Best Practices**: Avoid SELECT *, proper JOIN usage\n6. **Database Portability**: Consider compatibility across database systems\n7. **Transaction Handling**: Proper transaction boundaries and rollback strategies\n\nProvide specific feedback with line numbers. If no issues found, explain why the code is approved.",

  ".yaml": "IMPORTANT: Your first line of response must be either `AI-REVIEW:[PASS]` or `AI-REVIEW:[FAIL]`.\n\nReview this YAML configuration file: {filename}\n\nChanges:\n```\n{diff}\n```\n\n{diff_only_note}\n\nFocus on configuration quality:\n1. **Syntax Validity**: Proper YAML formatting and structure\n2. **Security**: No hardcoded secrets, sensitive data exposure\n3. **Consistency**: Consistent naming conventions and structure\n4. **Documentation**: Comments explaining complex configurations\n5. **Environment Considerations**: Proper environment-specific settings\n6. **Validation**: Schema compliance where applicable\n7. **Maintainability**: Clear organization and readability\n\nNote: Focus on configuration correctness rather than code logic. Provide specific feedback with line numbers."
}
